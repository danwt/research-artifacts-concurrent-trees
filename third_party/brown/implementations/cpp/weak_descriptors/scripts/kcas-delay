#!/bin/bash

source plaf.bash

## note: these results are only for the intel machine, since they use lgchunk=21

exp=kcas-delay
seqwidth=48
#algs="kcas_reuse kcas_throwaway_debra_nopool"
algs="kcas_reuse kcas_throwaway_rcu_nopool kcas_throwaway_hazardptr_nopool kcas_throwaway_debra_nopool"
#algs="kcas_reuse"
keyranges_ks="16384~2 16384~16 67108864~2 67108864~16"
#keyranges_ks="16384~2"
lgchunk_sizes="21"
delay_cyclecounts="0 3 10 33 100 333 1000 3333 10000 33333 100000"
#delay_cyclecounts="0 100000"
ntrials=10
t=1000
pinning=-DTHREAD_BINDING=$pin_cluster

if [ "$#" -ne "0" ]; then
	echo "RUNNING IN TEST MODE"
	ntrials=1
	t=1
fi

outdir=output.${machine}.$exp
logfile=$outdir/log.out
compilinglogfile=$outdir/compiling.out
stderrfile=$outdir/stderr.out
f=$outdir/temp.out

cd ..
rm -r -f $outdir.old
mv $outdir $outdir.old
mkdir $outdir

if [ -e "./lib/libjemalloc.so" ]; then
    envcmd="env LD_PRELOAD=./lib/libjemalloc.so"
else
    envcmd="env LD_PRELOAD=./lib/libjemalloc.so.2"
fi

echo "-------------------- BEGIN VARIABLES --------------------" >> $logfile
( set -o posix ; set ) >> $logfile
echo "--------------------- END VARIABLES ---------------------" >> $logfile

echo "Compiling..." >> $logfile
cat $logfile

parallel "make -j kcas-ubench machine=$machine pinning=$pinning delaysuffix=_delay{} delayarg=-DDELAY_CYCLES={} ; if [ $? -ne 0 ]; then exit 1; fi" ::: $delay_cyclecounts

#make -j 96 kcas-delay machine="$machine" pinning="$pinning" >> $compilinglogfile
if [ "$?" -ne "0" ]; then
#	echo "ERROR: compilation failed"
#	cat $compilinglogfile
	exit 1
fi

succ=1
cnt1=0
cnt2=0
for counting in 1 0; do
for lgchunk in $lgchunk_sizes; do
    malloc_conf="MALLOC_CONF=lg_chunk:${lgchunk}"
    for alg in $algs; do
    for keyrange_k in $keyranges_ks; do
        keyrange=`echo $keyrange_k | cut -d"~" -f1`
        maxk=`echo $keyrange_k | cut -d"~" -f2`
        for delay in $delay_cyclecounts; do
            if [ $counting -eq 1 ]; then
                echo "counting trials for lgchunk $lgchunk, alg $alg, keyrange $keyrange, maxk $maxk, delay $delay"
            fi

            for nthreads in $maxthreadcount; do #$threadcounts; do
            for ((trial=0;trial<$ntrials;++trial)); do
                if [ $counting -eq 1 ]; then
                    cnt1=`expr $cnt1 + 1`
                    continue
                fi

                cnt2=`expr $cnt2 + 1`
                echo -n "trial $cnt2 / $cnt1: "

                args="-t $t -k $keyrange -n $nthreads"
                cmd="$machine.${alg}_k${maxk}_delay${delay}.out $args"
                fname=`echo $cmd | tr " " "."`
                fname="step$cnt2.${fname}.-seqwidth.$seqwidth.-trial.$trial.-lgchunk.$lgchunk"
                fname="$outdir/$fname.data"
                echo "$envcmd ${malloc_conf} $cmdprefix ./$cmd"
                echo "$envcmd ${malloc_conf} $cmdprefix ./$cmd" > $fname
                $envcmd ${malloc_conf} $cmdprefix ./$cmd >> $fname 2>>$stderrfile
                #$envcmd ${malloc_conf} $cmdprefix ./$machine.${alg}_k${maxk}.out $args >> $fname 2>>$stderrfile
                if [ "$?" -ne "0" ]; then
                    echo "ERROR: nonzero status after executing $cmd" >> $stderrfile
                    succ=0
                fi
            done
            done
        done
    done
    done
done
done

cat $logfile > $f
cat $compilinglogfile > $logfile
echo >> $logfile
cat $f >> $logfile
rm -f $f
rm -f $compilinglogfile

if [ $succ -eq 0 ]; then
    cat $stderrfile
else
    cd scripts
    ./${exp}.format ${machine}
fi
